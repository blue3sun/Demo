// Generated by Dagger (https://dagger.dev).
package com.android.daggerdemo.component;

import com.android.daggerdemo.Grade;
import com.android.daggerdemo.MainActivity;
import com.android.daggerdemo.Student;
import com.android.daggerdemo.complex.MainActivity_MembersInjector;
import com.android.daggerdemo.complex.Student_Factory;
import com.android.daggerdemo.module.StudentModule;

import javax.inject.Provider;

import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerStudentComponent implements StudentComponent {
  private Provider<Student> studentProvider;

  private Provider<Student> getStudentDevProvider;

  private Provider<Student> getStudentTestProvider;

  private Provider<Grade> getGradeProvider;

  private DaggerStudentComponent(StudentModule studentModuleParam) {

    initialize(studentModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static StudentComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final StudentModule studentModuleParam) {
    this.studentProvider = DoubleCheck.provider(Student_Factory.create());
    this.getStudentDevProvider = DoubleCheck.provider(StudentModule_GetStudentDevFactory.create(studentModuleParam));
    this.getStudentTestProvider = DoubleCheck.provider(StudentModule_GetStudentTestFactory.create(studentModuleParam));
    this.getGradeProvider = DoubleCheck.provider(StudentModule_GetGradeFactory.create(studentModuleParam));
  }

  @Override
  public Student getStudent() {
    return studentProvider.get();
  }

  @Override
  public Student getStudentDev() {
    return getStudentDevProvider.get();
  }

  @Override
  public Student getStudentTest() {
    return getStudentTestProvider.get();
  }

  @Override
  public Grade getGrade() {
    return getGradeProvider.get();
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMStudent1(instance, getStudentDevProvider.get());
    MainActivity_MembersInjector.injectMStudent2(instance, getStudentDevProvider.get());
    MainActivity_MembersInjector.injectMStudent3(instance, getStudentTestProvider.get());
    MainActivity_MembersInjector.injectMGrade(instance, getGradeProvider.get());
    return instance;
  }

  public static final class Builder {
    private StudentModule studentModule;

    private Builder() {
    }

    public Builder studentModule(StudentModule studentModule) {
      this.studentModule = Preconditions.checkNotNull(studentModule);
      return this;
    }

    public StudentComponent build() {
      if (studentModule == null) {
        this.studentModule = new StudentModule();
      }
      return new DaggerStudentComponent(studentModule);
    }
  }
}
